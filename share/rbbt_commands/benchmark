#!/usr/bin/env ruby

require 'rbbt-util'
require 'rbbt/util/simpleopt'

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Run Sequence workflow benchmark agains other methods

$ #{$0} [options] <genomic_mutations_file> <size1> <size2> <size3> ...

Use - to read from STDIN

-h--help Print this help
-m--method* Methods to compare to
-s--sort Sort mutations
-p--plot* Plot file with results (default plot.svg)

EOF
if options[:help]
  if defined? rbbt_usage
    rbbt_usage 
  else
    puts SOPT.usage
  end
  exit 0
end

require 'rbbt-util'
require 'rbbt/workflow'
require 'rbbt/util/R'

Workflow.require_workflow "Sequence"
Workflow.require_workflow "Annovar"
Workflow.require_workflow "VEP"

file, *sizes = ARGV

plot = options[:plot] || 'plot.svg'
options[:method] = options[:method].split(",") if options[:method]
log = Log.severity

times = {
  "VEP" => [],
  "ANNOVAR" => [],
  "Sequence_nostream" => [], 
  "Sequence" => [], 
  "Sequence_exec" => [], 
  "Sequence_fast" => [], 
  "Sequence_cp" => [], 
  "Sequence_fast_no_MP" => [], 
}
organism = Organism.default_code("Hsa")

sizes.each do |size|
  size = size.to_i

  text = ""
  lines = Open.read(file).split("\n").reject{|l| l =~ /^M:/}[1..size]
  lines = lines.sort if options[:sort]
  text = lines * "\n" + "\n"

  TmpFile.with_file(text) do |tmpfile|
    Path.setup(tmpfile)

    jobname = [File.basename(file), size] * "."

    if options[:method].nil? or options[:method].include? "ANNOVAR"
      Log.info "annovar" + " " +  size.to_s
      job = Annovar.job(:analysis, jobname, :positions => Open.read(tmpfile).split("\n"))
      job.fork.join
      time = job.info[:process_time]
      times["ANNOVAR"] << time
      Log.info Log.color(:red, "annovar") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
    end
    
    if options[:method].nil? or options[:method].include? "VEP" and not size > 50_000
      Log.info "VEP" + " " +  size.to_s
      job = VEP.job(:analysis, jobname, :positions => Open.read(tmpfile).split("\n"))
      job.fork.join
      time = job.info[:process_time]
      times["VEP"] << time
      Log.info Log.color(:red, "VEP") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
    end


    if options[:method].nil? or options[:method].include? "Sequence_nostream"
      Log.info "Sequence_nostream" + " " +  size.to_s
      ENV["RBBT_NO_STREAM"] = "true"
      job = Sequence.job(:mutated_isoforms, jobname + ".no_stream", :mutations => tmpfile, :organism => organism).recursive_clean
      start = Time.now
      job.fork.join
      ENV["RBBT_NO_STREAM"] = nil
      time = Time.now - start
      times["Sequence_nostream"] << time
      Log.info Log.color(:red, "Sequence_nostream") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
    end

    if options[:method].nil? or options[:method].include? "Sequence"
      Open.open(tmpfile) do |f|
        Log.info "Sequence" + " " +  size.to_s
        job = Sequence.job(:mutated_isoforms, jobname + ".steps", :mutations => f, :organism => organism)
        job.fork
        job.join
        time = job.info[:time_elapsed]
        times["Sequence"] << time
        Log.info Log.color(:red, "Sequence") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
      end
    end

    if options[:method].nil? or options[:method].include? "Sequence_exec"
      Open.open(tmpfile) do |f|
        Log.info "Sequence_exec" + " " +  size.to_s
        job = Sequence.job(:mutated_isoforms, jobname + ".exec", :mutations => f, :organism => organism).recursive_clean
        start = Time.now
        res = job.exec(true)
        res.read
        time = Time.now - start
        times["Sequence_exec"] << time
        Log.info Log.color(:red, "Sequence_exec") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
      end
    end

    if options[:method].nil? or options[:method].include? "Sequence_fast_no_MP"
      Open.open(tmpfile) do |f|
        Log.info "Sequence_fast_no_MP" + " " +  size.to_s
        ENV["RBBT_NO_MAP_REDUCE"] = "true"
        job = Sequence.job(:mutated_isoforms_fast, jobname + ".no_mp", :mutations => f, :organism => organism)
        job.run
        ENV["RBBT_NO_MAP_REDUCE"] = nil
        time = job.info[:time_elapsed]
        times["Sequence_fast_no_MP"] << time
        Log.info Log.color(:red, "Sequence_fast_no_MP") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
      end
    end

    if options[:method].nil? or options[:method].include? "Sequence_fast"
      Open.open(tmpfile) do |f|
        Log.info "Sequence_fast" + " " +  size.to_s
        job = Sequence.job(:mutated_isoforms_fast, jobname + ".fast", :mutations => f, :organism => organism)
        job.fork(true)
        job.join
        time = job.info[:time_elapsed]
        times["Sequence_fast"] << time
        Log.info Log.color(:red, "Sequence_fast") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
      end
    end
    
    if options[:method].nil? or options[:method].include? "Sequence_cp"
      Open.open(tmpfile) do |f|
        Log.info "Sequence_cp" + " " +  size.to_s
        job = Sequence.job(:mutated_isoforms_fast, jobname + ".cp", :mutations => f, :organism => organism, :coding => true, :principal => true)
        job.fork(true)
        job.join
        time = job.info[:time_elapsed]
        times["Sequence_cp"] << time
        Log.info Log.color(:red, "Sequence_cp") + " " + Log.color(:blue, size.to_s) + " " + Log.color(:yellow, time.to_i)
      end
    end
  end
end

TSV.setup(times, :key_field => "Method", :fields => sizes, :type => :list, :cast => :to_i)

puts Log.color :magenta, "Benchmark results"

times.delete_if{|k,v| v.empty? }
puts times.to_s

times.R <<-EOF

rbbt.require('reshape')
rbbt.require('ggplot2')

data$Method = rownames(data)
m = melt(data)
m$variable = as.numeric(as.character(m$variable))
names(m) <- c("Method", "Size", "Time")
plot = qplot(Size, Time, colour=Method, group=Method, data = m) + geom_line() + scale_x_log10() + scale_y_log10() 
ggsave(plot, file='#{plot}')
EOF

raise "No file" unless File.exists? plot
puts Log.color :magenta, "Plot saved at:"
puts plot
