#!/usr/bin/env ruby

mutations_hg19 = Rbbt.examples.affected_genes["10_000"].mutations.find(:lib).list
mutations_hg18 = Rbbt.examples.affected_genes.may2009.mutations.find(:lib).list

require 'rbbt/workflow'

Workflow.require_workflow "Sequence"

mutations = {}

Organism.organism_codes.each do |code|
    if code =~ /Hsa/
        build = Organism.hg_build code
        mutations[code] = build == 'hg19' ? mutations_hg19 : mutations_hg18
    else
        mutations[code] = []
        Organism.chromosomes(code).list.each do |chromosome|
            mutations[code] << [chromosomes, "20000", ":T"]
        end
    end
end

jobs = []
mutations.keys.each do |organism|

  params = { :positions => mutations[organism].dup, :organism => organism}

  job = Sequence.job(:reference, "BOOTSTRAP-#{organism}", params)
  jobs << job

  params = { :mutations => mutations[organism].dup, :organism => organism, :watson => false }
  job = Sequence.job(:affected_genes, "BOOTSTRAP-#{organism}", params)
  jobs << job

  params = { :positions => mutations[organism].dup, :organism => organism}
  job = Sequence.job(:genes, "BOOTSTRAP-#{organism}", params)
  jobs << job

  params = { :positions => mutations[organism].dup, :organism => organism}
  job = Sequence.job(:transcripts, "BOOTSTRAP-#{organism}", params)
  jobs << job
end

procs = ARGV.shift 
require 'rbbt/util/semaphore'
Misc.bootstrap(jobs, procs) do |job|
  job.run
end

Organism.organism_codes.each do |code|
  Organism.exons(code).produce
  Organism.transcripts(code).produce
  Organism.transcript_sequence(code).produce
  Organism.protein_sequence(code).produce
  Organism.protein_identifiers(code).produce
  Organism.lexicon(code).produce
  Organism.gene_pmids(code).produce
end
